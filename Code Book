Getting and Cleaning Data. Project Course
Code Book
•	Project Introduction
•	Github Content
•	Raw Data
•	Project Code, Variables and Explanation
•	Output content
•	Comments

Project Introduction (From Project Assignment)
The purpose of this project is to demonstrate your ability to collect, work with, and clean a data set. The goal is to prepare tidy data that can be used for later analysis. You will be graded by your peers on a series of yes/no questions related to the project. 
You will be required to submit:  1) a tidy data set as described below, 2) a link to a Github repository with your script for performing the analysis, and 3) a code book that describes the variables, the data, and any transformations or work that you performed to clean up the data called CodeBook.md. You should also include a README.md in the repo with your scripts. This repo explains how all of the scripts work and how they are connected.  
One of the most exciting areas in all of data science right now is wearable computing - see for example this article. Companies like Fitbit, Nike, and Jawbone Up are racing to develop the most advanced algorithms to attract new users. The data linked to from the course website represent data collected from the accelerometers from the Samsung Galaxy S smartphone. A full description is available at the site where the data was obtained: 
http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones 
Here are the data for the project: 
https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip 
 You should create one R script called run_analysis.R that does the following. 
1.	Merges the training and the test sets to create one data set.
2.	Extracts only the measurements on the mean and standard deviation for each measurement. 
3.	Uses descriptive activity names to name the activities in the data set
4.	Appropriately labels the data set with descriptive variable names. 
5.	From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
Good luck!

 
Gihub Contents
The program generated to cover the output requirements of this project is in the file named: “run_analysis.R” as requested by the project assignment instructions. 
You can find it in the Github:
https://github.com/204027408/Getting-and-Cleaning-Data/tree/master
This project delivers the data requested as “tidy_data_set” in the form or a txt and csv file, and also a second file with the mean and standard deviation summary  “avg_tidy_data_set” in the  same formats.
This code book is available in the same Github.
The Github includes:
•	Project Code: “run_analysis.R”
•	README
•	CodeBook
•	Output Files

Raw Data

From: https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip 
File at working directory: UCI HAR Dataset
/test
	/Inertial Signals (per axes)
		/ body_acc…
		/ body_gyro..
		/total_acc…
	/subject_test.txt
	/X_test.txt
	/y_test.txt
/train
	/Inertial Signals (per axes)
		/ body_acc…
		/ body_gyro..
		/total_acc…
	/subject_train.txt
	/X_train.txt
	/y_train.txt
activity_labels.txt
fetures.txt
features_info.txt
README.txt
Content:
==================================================================
Human Activity Recognition Using Smartphones Dataset
Version 1.0
==================================================================
Jorge L. Reyes-Ortiz, Davide Anguita, Alessandro Ghio, Luca Oneto.
Smartlab - Non Linear Complex Systems Laboratory
DITEN - Università degli Studi di Genova.
Via Opera Pia 11A, I-16145, Genoa, Italy.
activityrecognition@smartlab.ws
www.smartlab.ws
==================================================================

The experiments have been carried out with a group of 30 volunteers within an age bracket of 19-48 years. Each person performed six activities (WALKING, WALKING_UPSTAIRS, WALKING_DOWNSTAIRS, SITTING, STANDING, LAYING) wearing a smartphone (Samsung Galaxy S II) on the waist. Using its embedded accelerometer and gyroscope, we captured 3-axial linear acceleration and 3-axial angular velocity at a constant rate of 50Hz. The experiments have been video-recorded to label the data manually. The obtained dataset has been randomly partitioned into two sets, where 70% of the volunteers was selected for generating the training data and 30% the test data. 
The sensor signals (accelerometer and gyroscope) were pre-processed by applying noise filters and then sampled in fixed-width sliding windows of 2.56 sec and 50% overlap (128 readings/window). The sensor acceleration signal, which has gravitational and body motion components, was separated using a Butterworth low-pass filter into body acceleration and gravity. The gravitational force is assumed to have only low frequency components, therefore a filter with 0.3 Hz cutoff frequency was used. From each window, a vector of features was obtained by calculating variables from the time and frequency domain. See 'features_info.txt' for more details. 
For each record it is provided:
======================================
- Triaxial acceleration from the accelerometer (total acceleration) and the estimated body acceleration.
- Triaxial Angular velocity from the gyroscope. 
- A 561-feature vector with time and frequency domain variables. 
- Its activity label. 
- An identifier of the subject who carried out the experiment.
The dataset includes the following files:
=========================================
- 'README.txt'
- 'features_info.txt': Shows information about the variables used on the feature vector.
- 'features.txt': List of all features.
- 'activity_labels.txt': Links the class labels with their activity name.
- 'train/X_train.txt': Training set.
- 'train/y_train.txt': Training labels.
- 'test/X_test.txt': Test set.
- 'test/y_test.txt': Test labels.
The following files are available for the train and test data. Their descriptions are equivalent. 
- 'train/subject_train.txt': Each row identifies the subject who performed the activity for each window sample. Its range is from 1 to 30. 
- 'train/Inertial Signals/total_acc_x_train.txt': The acceleration signal from the smartphone accelerometer X axis in standard gravity units 'g'. Every row shows a 128 element vector. The same description applies for the 'total_acc_x_train.txt' and 'total_acc_z_train.txt' files for the Y and Z axis. 
- 'train/Inertial Signals/body_acc_x_train.txt': The body acceleration signal obtained by subtracting the gravity from the total acceleration. 
- 'train/Inertial Signals/body_gyro_x_train.txt': The angular velocity vector measured by the gyroscope for each window sample. The units are radians/second. 
Notes: 
======
- Features are normalized and bounded within [-1,1].
- Each feature vector is a row on the text file.
For more information about this dataset contact: activityrecognition@smartlab.ws
License:
========
Use of this dataset in publications must be acknowledged by referencing the following publication [1] 
[1] Davide Anguita, Alessandro Ghio, Luca Oneto, Xavier Parra and Jorge L. Reyes-Ortiz. Human Activity Recognition on Smartphones using a Multiclass Hardware-Friendly Support Vector Machine. International Workshop of Ambient Assisted Living (IWAAL 2012). Vitoria-Gasteiz, Spain. Dec 2012
This dataset is distributed AS-IS and no responsibility implied or explicit can be addressed to the authors or their institutions for its use or misuse. Any commercial use is prohibited.
Jorge L. Reyes-Ortiz, Alessandro Ghio, Luca Oneto, Davide Anguita. November 2012.

Project Code, Variables  and Explanation

# Getting and Cleaning Data
# Course Project
# Data downloaded to the working directory from the web page given in the assignment.
# Could not read it directly with R since the libraries were not working in the R version used.
# https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip
# 1. Merged the training and the test sets to create one data set with the read.table() function:
# Reading the data from the working directory
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt", header = FALSE)
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt", header = FALSE)
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt", header = FALSE)
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt", header = FALSE)
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt", header = FALSE)
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt", header = FALSE)

# Combined all data rows in one single table for x, y and s using the rbind(). 
x <- rbind(X_train, X_test)
y <- rbind(y_train, y_test)
s <- rbind(subject_train, subject_test)

# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# Read features labels from the features file
features <- read.table("./UCI HAR Dataset/features.txt")

# Named features column with names()
names(features) <- c('feature_id', 'feature_name')

# Mean or standard deviations match
features_ID <- grep("-mean\\(\\)|-std\\(\\)", features$feature_name) 
x <- x[, features_ID] 

# Strings matches 
names(x) <- gsub("\\(|\\)", "", (features[features_ID, 2]))

# 3. Uses descriptive activity names to name the activities in the data set and 
# 4. Appropriately labels the data set with descriptive activity names.
# Reading activities
activities <- read.table("./UCI HAR Dataset/activity_labels.txt")

# naming column of activities 
names(activities) <- c('act_id', 'act_name')
y[, 1] = activities[y[, 1], 2]
names(y) <- "Activity"
names(s) <- "Subject"

# Combining data frame with columns to get the tidy data set using cbind()
tidy_data_set <- cbind(s, y, x)

# Create file with tidy data set(txt and csv). Decides to create both types of files to be able to see if the data was correctly defined per columns using excel as viewer application.
write.table (tidy_data_set, file="tidy_data_set", row.name=FALSE)
write.csv (tidy_data_set, file="tidy_data_set.csv")

# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
second <- tidy_data_set[, 3:dim(tidy_data_set)[2]] 
avg_tidy_data_set <- aggregate(second,list(tidy_data_set$Subject, tidy_data_set$Activity), mean)
# Column Names for Activity and Subject 
names(avg_tidy_data_set)[1] <- "Subject"
names(avg_tidy_data_set)[2] <- "Activity"

# Create file with averages of tidy data set
write.table(avg_tidy_data_set, file="avg_tidy_data_set", row.name=FALSE)
write.csv(avg_tidy_data_set, file="avg_tidy_data_set.csv")

Output content

Files: 
“tidy_data_set”
“tidy_data_set.csv”
“avg_tidy_data_set”
“avg_tidy_data_set.csv”

Comments

I could not make the write.table to produce the direct file with extension .txt, I had to edit the file to be read by the text editor. I created the .csv to be able to see it in excel.
Any feedback is welcome.
